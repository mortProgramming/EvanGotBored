plugins {
  id 'cpp'
  id 'java'
  id 'google-test'
  id 'edu.wpi.first.wpilib.repositories.WPILibRepositoriesPlugin' version '2020.2'
  id 'edu.wpi.first.NativeUtils' version '2025.2.1'
  id 'edu.wpi.first.GradleJni' version '1.1.0'
  id 'edu.wpi.first.GradleVsCode' version '2.1.0'
  id 'edu.wpi.first.GradleRIO' version '2025.2.1'


java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

allprojects {
    group 'com.MORTlib'
    version '25.0.1'

    repositories {
        mavenCentral()

        maven { url = uri('https://frcmaven.wpi.edu/artifactory/release/') }

        // CTRE
        maven { url = uri('https://maven.ctr-electronics.com/release/') }
 
        // REV
        maven { url = uri('https://maven.revrobotics.com/') }

        // kauailabs
        maven { url = uri('https://dev.studica.com/maven/release/2025/') }

        // PathPlanner
        maven { url = uri('https://3015rangerrobotics.github.io/pathplannerlib/repo/') }

        // PhotonVisiom
        maven { url = uri('https://maven.photonvision.org/repository/internal') }
        maven { url = uri('https://maven.photonvision.org/repository/snapshots') }
    }
}

if (project.hasProperty('releaseMode')) {
  wpilibRepositories.addAllReleaseRepositories(project)
} else {
  wpilibRepositories.addAllDevelopmentRepositories(project)
}

// Apply C++ configuration
apply from: 'config.gradle'

// Apply Java configuration
dependencies {
    implementation 'edu.wpi.first.cscore:cscore-java:2025.+'
    implementation 'edu.wpi.first.cameraserver:cameraserver-java:2025.+'
    implementation 'edu.wpi.first.ntcore:ntcore-java:2025.+'
    implementation 'edu.wpi.first.wpilibj:wpilibj-java:2025.+'
    implementation 'edu.wpi.first.wpiutil:wpiutil-java:2025.+'
    implementation 'edu.wpi.first.wpimath:wpimath-java:2025.+'
    implementation 'edu.wpi.first.wpiunits:wpiunits-java:2025.+'
    implementation 'edu.wpi.first.hal:hal-java:2025.+'
    implementation "org.ejml:ejml-simple:0.43.1"
    implementation "com.fasterxml.jackson.core:jackson-annotations:2.12.4"
    implementation "com.fasterxml.jackson.core:jackson-core:2.12.4"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.12.4"
    implementation 'edu.wpi.first.thirdparty.frc2025.opencv:opencv-java:4.8.0-2'

    implementation "edu.wpi.first.wpilibNewCommands:wpilibNewCommands-java:${wpilib_version}"

    annotationProcessor wpi.java.deps.wpilibAnnotations()
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'


    // CTRE is implementation because it is not a hard requirement
    implementation "com.ctre.phoenix6:wpiapi-java:${ctre_phoenix_version}"

    // REV is implementation because it is not a hard requirement
    implementation "com.revrobotics.frc:REVLib-java:${revlib_version}"

    // NavX stuff?
    implementation "com.kauailabs.navx.frc:navx-frc-java:${navx_frc_version}"

    // Path Planner
    implementation "com.pathplanner.lib:PathplannerLib-java:${pathplanner_version}"

    // PhotonVision
    implementation "org.photonvision:photonlib-java:${photonvision_version}"
}

// Set up exports properly
nativeUtils {
  exportsConfigs {
    // Main library is just default empty. This will export everything
    MORTlib {
    }
  }
  privateExportsConfigs {
    // Only export explicit symbols from driver library
    
  }
}

model {
  components {
    MORTlib(NativeLibrarySpec) {
      sources {
        cpp {
          source {
            srcDirs 'src/main/native/cpp'
            include '**/*.cpp'
          }
          exportedHeaders {
            srcDirs 'src/main/native/include'
          }
        }
      }
      nativeUtils.useRequiredLibrary(it, 'wpilib_shared')
    }
  }
  testSuites {
    MORTlibTest {
        sources.cpp {
            source {
                srcDir 'src/test/native/cpp'
                include '**/*.cpp'
            }
        }
        nativeUtils.useRequiredLibrary(it, "wpilib_executable_shared", "googletest_static")
    }
  }
}

apply from: 'publish.gradle'

wrapper {
  gradleVersion '8.4'
}